(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{421:function(t,e,a){"use strict";a.r(e);var s=a(26),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"programming-best-practices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#programming-best-practices"}},[t._v("#")]),t._v(" Programming Best Practices")]),t._v(" "),a("p",[t._v("The natural tendency of new programmers is to write code that works, and then move on. Unfortunately, that leads to a\ntrail of chaos left behind, where the code may work, but it's hard to tell "),a("em",[t._v("how")]),t._v(" or "),a("em",[t._v("why.")])]),t._v(" "),a("p",[a("br"),t._v("\nThat's fine until you need to change something. Either you're trying to find the cause of a bug and fix it, or you're\ntrying to adjust how part of the character works, you'll be back. Code is read much more often than it's written.")]),t._v(" "),a("p",[a("br"),t._v("\nBeing organized also prevents a lot of bugs before they happen. Spending a little more time making your code clean and\norganized will "),a("em",[t._v("save")]),t._v(" you more time in the future.")]),t._v(" "),a("h1",{attrs:{id:"naming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#naming"}},[t._v("#")]),t._v(" Naming")]),t._v(" "),a("p",[t._v("This is the quickest win. Once good naming is a habit, all your code will be easier to understand.")]),t._v(" "),a("p",[a("br"),t._v("\nNaming well is conceptually simple. Think of what the variable "),a("em",[t._v("means.")]),t._v(" If someone asked you what it is, think of what\nyou'd tell them. That's what your variable name should say.")]),t._v(" "),a("p",[a("br"),t._v("\nDon't worry too much about keeping your variable names very short. Editors provide autocompletion of variable names.")]),t._v(" "),a("div",{staticClass:"custom-block construction"},[a("p",{staticClass:"custom-block-title"},[t._v("Under Construction")]),t._v(" "),a("p",[t._v("Could use some demonstrative examples here")])]),t._v(" "),a("h2",{attrs:{id:"be-consistent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#be-consistent"}},[t._v("#")]),t._v(" Be consistent")]),t._v(" "),a("p",[t._v("Later you're going to want to remember what you called something.")]),t._v(" "),a("p",[t._v("If you've named similar things before, follow the same patterns. Stick to "),a("code",[t._v("camel_case_naming")]),t._v(" to be consistent with\nRivals' built-in functions.")]),t._v(" "),a("p",[t._v("Rivals doesn't do a great job of this itself. The variable to see if a character can cancel their current action into a\nwall jump is "),a("code",[t._v("can_wall_jump")]),t._v(". Can you guess the variable to see if a character has a remaining wall jump?\nIt's "),a("code",[t._v("has_walljump")]),t._v(". Try to make your code obvious, and avoid creased foreheads.")]),t._v(" "),a("h1",{attrs:{id:"duplication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#duplication"}},[t._v("#")]),t._v(" Duplication")]),t._v(" "),a("p",[t._v("When something is written in multiple places, there's a high chance that it is logical duplication, which can make your\njob much harder later on.")]),t._v(" "),a("p",[t._v("By extracting the repeated code to a name, you can avoid needing to change multiple places, and make the code more\nreadable.")]),t._v(" "),a("h2",{attrs:{id:"values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#values"}},[t._v("#")]),t._v(" Values")]),t._v(" "),a("div",{staticClass:"language-gml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A charge shot with a charged and uncharged stage. ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When charge is 50, it plays a sound and creates a stronger projectile.")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" laser_charge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sound_play")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sound_get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sfx_ghost_glove"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... Some time later")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" laser_charge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create the stronger attack")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create the weaker attack ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("During balancing, you realize it's charging too slowly, and you want to try it at 40. It's been a while, so you forgot\nthat you wrote '50' in multiple places, and you miss one, and get a weird bug. Searching all project files for '50'\ncould help, but can be messy, especially if the value is being used for another meaning elsewhere.")]),t._v(" "),a("p",[t._v("The solution is to save '50' to a variable with a nice descriptive name, and use that variable instead of the value\ndirectly.")]),t._v(" "),a("div",{staticClass:"language-gml extra-class"},[a("div",{staticClass:"highlight-lines"},[a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-gml"}},[a("code",[t._v("laser_charge_requirement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v(" # The only code that needs to be changed to alter the value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" charge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" laser_charge_requirement "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sound_play")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sound_get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sfx_ghost_glove"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... Some time later")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" laser_charge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" laser_charge_requirement "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create the stronger attack")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create the weaker attack ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"behavior"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#behavior"}},[t._v("#")]),t._v(" Behavior")]),t._v(" "),a("p",[t._v("Behavior can be duplicated too. When you find you're writing the nearly identical lines of code in multiple places, that\ncan lead to the same sort of problem.")]),t._v(" "),a("div",{staticClass:"language-gml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gml"}},[a("code",[t._v("# The character has an empowered state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" which buffs their next special "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" then ends"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" attack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" AT_NSPECIAL "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" empowered "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (Code that does empowered nspecial)")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sound_play")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sound_get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sfx_go"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        empowered "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" attack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" AT_DSPECIAL "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" empowered "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (Code that does empowered dspecial)")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sound_play")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sound_get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sfx_go"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        empowered "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Say that later you want to add a flash as well as the sound effect. Again, you'd need to make the same changes to\nmultiple places in order to avoid weird inconsistent behavior.")]),t._v(" "),a("p",[t._v("Fortunately, you can save the behavior to a "),a("RouterLink",{attrs:{to:"/workshop_guide/programming/learning_path/functions.html"}},[t._v("function")]),t._v(" with a "),a("code",[t._v("#define")]),t._v(" block.")],1),t._v(" "),a("div",{staticClass:"language-gml extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-gml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" attack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" AT_NSPECIAL "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" empowered "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (Code that does empowered nspecial)")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("spend_empowered")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" attack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" AT_DSPECIAL "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" empowered "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (Code that does empowered dspecial)")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("spend_empower")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n#define "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("spend_empower")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sound_play")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sound_get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sfx_go"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    empowered "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("p",[t._v("Now adding the flash only needs to change the new function. Using named values like "),a("code",[t._v("spend_empower")]),t._v(" often improves\nreadability as well.")]),t._v(" "),a("p",[t._v("With "),a("a",{attrs:{href:"/assistant"}},[t._v("the Assistant")]),t._v(", you can share defines across files, rather than needing to copy them into each\nfile where they're used.")]),t._v(" "),a("h1",{attrs:{id:"decomposition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decomposition"}},[t._v("#")]),t._v(" Decomposition")]),t._v(" "),a("p",[t._v("Sometimes you'll have complicated problems to solve. If you work at it, you can probably solve it with some gross\ncomplicated code.")]),t._v(" "),a("p",[t._v("It doesn't have to be that way. How simple or complicated something is to understand depends on how well the details are\ngrouped and hidden. When well organized, code should read like an english explanation of what it's doing.")]),t._v(" "),a("h2",{attrs:{id:"a-weird-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-weird-example"}},[t._v("#")]),t._v(" A weird example")]),t._v(" "),a("p",[t._v("Imagine programming a robot to walk from your bedroom to your front door, where the only built-ins\nare "),a("code",[t._v("left_wheel_velocity")]),t._v(" and "),a("code",[t._v("right_wheel_velocity")]),t._v(", and "),a("code",[t._v("wait(ms)")]),t._v(".")]),t._v(" "),a("p",[t._v("It would be entirely possible to complete the task just by changing the wheel's at the right times to get it to turn and\nmove the right amounts. The resulting code would be incomprehensible and extremely hard to change.")]),t._v(" "),a("p",[a("br"),t._v("\nThe trick to notice is that you're doing repeated actions with those wheel changes, turning and moving forwards. You\ncould improve things by making functions for "),a("code",[t._v("turn(direction)")]),t._v(" and "),a("code",[t._v("move(distance)")]),t._v(", which handle the wheel adjustments\nfor that change.")]),t._v(" "),a("p",[t._v("Now the code would look like a series of turns and movements rather than a series of wheel adjustments. Easier to read,\nwrite, and understand, but still not "),a("em",[t._v("easy.")])]),t._v(" "),a("p",[a("br"),t._v("\nThe functions being used are still too small and low level to describe what you're doing. If you keep track of the\nrobot's current position, you could make "),a("code",[t._v("go_to_point(x, y)")]),t._v(", which turns towards that point and moves to reach it.")]),t._v(" "),a("p",[t._v("Then you can name the points to stop and turn at, e.g. "),a("code",[t._v("bedroom_door = [15, 30]")]),t._v(", and write the code just as a list of\nenglish named locations. Now the code is short, easy to understand, and easy to change.")]),t._v(" "),a("h2",{attrs:{id:"decomposing-from-the-start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decomposing-from-the-start"}},[t._v("#")]),t._v(" Decomposing from the start")]),t._v(" "),a("p",[t._v("Normally it's better not to write the horrific version first and then clean it up. It's much nicer for things to be\nsimple when you're still writing them. Write the code as if you were explaining it to someone.")]),t._v(" "),a("p",[t._v('With the robot example the task is "get to the front door":')]),t._v(" "),a("ul",[a("li",[t._v('If someone asked "How does it work?" - "It goes to this series of points."')]),t._v(" "),a("li",[t._v('They ask "How does '),a("code",[t._v("go_to_point")]),t._v(' work?" - "It turns the robot toward the point, and moves the distance between them."')]),t._v(" "),a("li",[t._v('"How does turning work?" - "It moves one wheel forwards, and the other backwards, for the right amount of time."\netc.')])]),t._v(" "),a("p",[t._v("In this way, even though the problem is complicated, each level of the code is simple. To look into the details, the\nreader just goes down a level to the next easy-to-understand function.")]),t._v(" "),a("p",[t._v("You can do this in code-comments or paper before you start coding to get a better idea of what you're doing.")]),t._v(" "),a("h1",{attrs:{id:"understanding-your-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#understanding-your-code"}},[t._v("#")]),t._v(" Understanding your Code")]),t._v(" "),a("p",[t._v("It is common in Rivals modding to learn how to do something by copying something similar from another mod. This sort of\nworks, but is setting yourself up to struggle.")]),t._v(" "),a("p",[t._v("It's hard enough to change and fix problems in code that you wrote yourself, that you're most prepared to understand.\nRelying on code you don't understand is an easy way to get buggy behavior and not know why or how to fix it.")]),t._v(" "),a("p",[t._v("When adding new code, make sure you can see what it's doing and why. What would happen if you changed or removed part?\nTry things out in game and see if they meet your expectations. Better to find out now than later when other code is\nrelying on it.")])])}),[],!1,null,null,null);e.default=n.exports}}]);